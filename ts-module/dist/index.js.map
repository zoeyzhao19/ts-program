{"version":3,"file":"index.js","sources":["../src/parseQueryString/index.ts"],"sourcesContent":["type MergeValue<One, Other> = \n    One extends Other \n    ? One\n    : Other extends unknown[]\n      ? [One, ...Other]\n      : [One, Other];\n\n  type MergeParam <Obj1 extends Record<string, any>, Obj2 extends Record<string, any>> = {\n    [Key in keyof Obj1 | keyof Obj2]: \n      Key extends keyof Obj1\n        ? (Key extends keyof Obj2\n          ? MergeValue<Obj1[Key], Obj2[Key]> : Obj1[Key])\n        : Key extends keyof Obj2\n          ? Obj2[Key]\n          : never\n  }\n  type ParseParam <Str extends string> =\n    Str extends `${infer Key}=${infer Value}`\n    ? {[K in Key] : Value}\n    : Record<string, any> // 用Record<string, any> 替代 {} 因为 ParseQueryString 是针对字符串字面量类型做运算的，如果传入的不是字面量类型，而是 string，那就会走到这里，如果返回空对象，那取res的任何属性都会报错。\n\n  export type ParseQueryString<Str extends string> =\n    Str extends `${infer Param}&${infer Rest}`\n      ? MergeParam<ParseParam<Param>, ParseQueryString<Rest>>\n      : ParseParam<Str>\n\nexport function parseQueryString<Str extends string>(queryStr: Str): ParseQueryString<Str> {\n  if (!queryStr || !queryStr.length) {\n      return {} as any;\n  }\n  const queryObj = {} as any;\n  const items = queryStr.split('&');\n  items.forEach(item => {\n      const [key, value] = item.split('=');\n      if (queryObj[key]) {\n          if(Array.isArray(queryObj[key])) {\n              queryObj[key].push(value);\n          } else {\n              queryObj[key] = [queryObj[key], value]\n          }\n      } else {\n          queryObj[key] = value;\n      }\n  });\n  return queryObj as any;\n}\n"],"names":[],"mappings":";;;;AA0BM,SAAU,gBAAgB,CAAqB,QAAa,EAAA;AAChE,IAAA,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;AAC/B,QAAA,OAAO,EAAS,CAAC;AACpB,KAAA;IACD,MAAM,QAAQ,GAAG,EAAS,CAAC;IAC3B,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAClC,IAAA,KAAK,CAAC,OAAO,CAAC,IAAI,IAAG;AACjB,QAAA,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACrC,QAAA,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;YACf,IAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE;gBAC7B,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC7B,aAAA;AAAM,iBAAA;AACH,gBAAA,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAA;AACzC,aAAA;AACJ,SAAA;AAAM,aAAA;AACH,YAAA,QAAQ,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;AACzB,SAAA;AACL,KAAC,CAAC,CAAC;AACH,IAAA,OAAO,QAAe,CAAC;AACzB;;;;"}